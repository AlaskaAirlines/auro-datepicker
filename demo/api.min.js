function alertValueExample() {
  const valueAlertExample = document.querySelector('#datePickerValueAlert');

  valueAlertExample.addEventListener('auroDatePicker-valueSet', () => {
    console.warn('Select value changed to:', valueAlertExample.value);
    alert(`Select value changed to: ${valueAlertExample.value}`);
  });
}

function errorExample() {
  const errorExample = document.querySelector('#errorExample');

  document.querySelector('#undefinedValueExampleBtnAddError').addEventListener('click', () => {
    errorExample.error = 'Custom New Error';
  });

  document.querySelector('#undefinedValueExampleBtnRemoveError').addEventListener('click', () => {
    errorExample.removeAttribute('error');
  });
}

function focusExample() {
  const focusExample = document.querySelector('#focusExample');
  const focusExampleBtn = document.querySelector('#focusExampleBtn');

  focusExampleBtn.addEventListener('click', () => {
    focusExample.focus();
  });
}

function monthNamesExample() {
  const monthNamesExample = document.querySelector('#monthNamesExample');
  const spanishMonths = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];

  monthNamesExample.monthNames = spanishMonths;
}

function populateSlotContentExample() {
  const populateSlotContentExample = document.querySelector('#slotContentExample');

  // Array of object(s) containing key, value pairs defining what slot content to render
  const data = [
    {slot: 'date', month: 12, day: 10, year: 2023, content: '$89'},
    {slot: 'date', month: 12, day: 11, year: 2023, content: '$100'},
    {slot: 'date', month: 12, day: 12, year: 2023, content: '$2345'},
    {slot: 'date', month: 12, day: 13, year: 2023, content: '$560'},
    {slot: 'date', month: 12, day: 14, year: 2023, content: 'Sold'},
    {slot: 'date', month: 12, day: 15, year: 2023, content: 'Sold'},
    {slot: 'date', month: 12, day: 16, year: 2023, content: 'Sold'},
    {slot: 'popover', month: 12, day: 10, year: 2023, content: 'Tickets for this date are $89'},
    {slot: 'popover', month: 12, day: 11, year: 2023, content: 'Tickets for this date are $100'},
    {slot: 'popover', month: 12, day: 12, year: 2023, content: 'Tickets for this date are $2345'},
    {slot: 'popover', month: 12, day: 13, year: 2023, content: 'Tickets for this date are $560'},
    {slot: 'popover', month: 12, day: 14, year: 2023, content: 'Tickets for this date are sold out'},
    {slot: 'popover', month: 12, day: 15, year: 2023, content: 'Tickets for this date are sold out'},
    {slot: 'popover', month: 12, day: 16, year: 2023, content: 'Tickets for this date are sold out'}
    
  ];

  // For each item in the array, parse the keys into an HTML element and insert it into the DOM
  data.forEach((item) => {

    // Create the new element for the slot content
    const slotElement = document.createElement('span');

    // Create the slot name from the item's keys
    const slotName = `${item.slot}_${item.month}_${item.day}_${item.year}`;

    // Set the slot name and content
    slotElement.setAttribute('slot', slotName);
    slotElement.textContent = item.content;

    // Append the new element to the DOM
    populateSlotContentExample.appendChild(slotElement);
  });
}

function formatDateString$1(date) {
  /* eslint-disable prefer-template, no-magic-numbers */
  const dd = String("0" + date.getDate()).slice(-2);
  const mm = String("0" + (date.getMonth() + 1)).slice(-2);
  /* eslint-enable prefer-template, no-magic-numbers */
  const yyyy = date.getFullYear();

  return `${mm}/${dd}/${yyyy}`;
}

function updateMaxDateExample() {
  const maxDateExample = document.getElementById('maxDateExample');
  const changeMaxDateButton = document.getElementById('maxDateChange');
  const resetButton = document.getElementById('resetMaxDate');

  const today = formatDateString$1(new Date());

  let nextWeek = new Date();
  let addOneWeek = nextWeek.getDate() + 7;

  nextWeek.setDate(addOneWeek);
  nextWeek = formatDateString$1(nextWeek);

  maxDateExample.setAttribute('value', nextWeek);
  maxDateExample.setAttribute('maxDate', nextWeek);

  changeMaxDateButton.addEventListener('click', () => {
    maxDateExample.setAttribute('maxDate', today);
  });

  resetButton.addEventListener('click', () => {
    maxDateExample.setAttribute('value', nextWeek);
    maxDateExample.setAttribute('maxDate', nextWeek);
  });
}

function formatDateString(date) {
  /* eslint-disable prefer-template, no-magic-numbers */
  const dd = String("0" + date.getDate()).slice(-2);
  const mm = String("0" + (date.getMonth() + 1)).slice(-2);
  /* eslint-enable prefer-template, no-magic-numbers */
  const yyyy = date.getFullYear();

  return `${mm}/${dd}/${yyyy}`;
}

function updateMinDateExample() {
  const minDateExample = document.getElementById('minDateExample');
  const changeMinDateButton = document.getElementById('minDateChange');
  const resetButton = document.getElementById('resetMinDate');

  const today = formatDateString(new Date());

  let nextWeek = new Date();
  let addOneWeek = nextWeek.getDate() + 7;

  nextWeek.setDate(addOneWeek);
  nextWeek = formatDateString(nextWeek);

  minDateExample.setAttribute('value', today);
  minDateExample.setAttribute('minDate', today);

  changeMinDateButton.addEventListener('click', () => {
    minDateExample.setAttribute('minDate', nextWeek);
  });

  resetButton.addEventListener('click', () => {
    minDateExample.setAttribute('value', today);
    minDateExample.setAttribute('minDate', today);
  });

}

function validityExample() {
  const validityExampleExample = document.querySelector('#validityExample');
  const validityExampleExampleBtn = document.querySelector('#validityExampleBtn');

  validityExampleExampleBtn.addEventListener('click', () => {
    console.warn('Validity set to:', validityExampleExample.validity);
    alert(`Validity set to: ${validityExampleExample.validity}`);
  });
}

function initDatepickerApiExamples(initCount) {
  initCount = initCount || 0;

  try {
    alertValueExample();
    errorExample();
    focusExample();
    monthNamesExample();
    populateSlotContentExample();
    updateMaxDateExample();
    updateMinDateExample();
    validityExample();
  } catch {
    if (initCount <= 20) {
      // setTimeout handles issue where content is sometimes loaded after the functions get called
      setTimeout(() => {
        initDatepickerApiExamples(initCount + 1);
      }, 100);
    }
  }
}

